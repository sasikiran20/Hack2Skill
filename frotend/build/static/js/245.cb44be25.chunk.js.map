{"version":3,"file":"static/js/245.cb44be25.chunk.js","mappings":"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","sources":["component/Admin/NewProduct.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useAlert } from 'react-alert';\nimport MetaData from '../layouts/MataData/MataData';\nimport Loader from '../layouts/loader/Loader';\nimport Sidebar from './Siderbar';\nimport { createProduct, clearErrors } from '../../actions/productAction';\nimport { useHistory } from 'react-router-dom';\nimport { NEW_PRODUCT_RESET } from '../../constants/productsConstatns';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Box from '@material-ui/core/Box';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport StorageIcon from '@material-ui/icons/Storage';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport CollectionsIcon from '@mui/icons-material/Collections';\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InfoIcon from '@mui/icons-material/Info';\n\nimport Navbar from './Navbar';\n\nimport useStyles from '../User/LoginFromStyle';\nimport {\n  Avatar,\n  TextField,\n  Typography,\n  FormControl,\n  Button,\n} from '@material-ui/core';\n\nfunction NewProduct() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const alert = useAlert();\n\n  const { loading, error, success } = useSelector(\n    (state) => state.addNewProduct,\n  );\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [Stock, setStock] = useState(0);\n  const [info, setInfo] = useState('');\n  const [images, setImages] = useState([]);\n  const [imagesPreview, setImagesPreview] = useState([]);\n  const [isCategory, setIsCategory] = useState(false);\n  const fileInputRef = useRef();\n  const [toggle, setToggle] = useState(false);\n\n  const classes = useStyles();\n  // togle handler =>\n  const toggleHandler = () => {\n    console.log('toggle');\n    setToggle(!toggle);\n  };\n\n  const handleCategoryChange = (e) => {\n    setCategory(e.target.value);\n    setIsCategory(true);\n  };\n\n  const handleImageUpload = () => {\n    fileInputRef.current.click();\n  };\n  const categories = [\n    'Antique Ceramics',\n    'Vase',\n    'Clocks',\n    'Jewellery',\n    'Vintage Decor',\n  ];\n  useEffect(() => {\n    if (error) {\n      alert.error(error);\n      dispatch(clearErrors());\n    }\n\n    if (success) {\n      alert.success('Product Created Successfully');\n      history.push('/admin/dashboard');\n      dispatch({ type: NEW_PRODUCT_RESET });\n    }\n  }, [dispatch, alert, error, history, success]);\n\n  const createProductSubmitHandler = (e) => {\n    e.preventDefault();\n    const myForm = new FormData();\n    myForm.set('name', name);\n    myForm.set('price', price);\n    myForm.set('description', description);\n    myForm.set('category', category);\n    myForm.set('Stock', Stock);\n    myForm.set('info', info);\n    images.forEach((currImg) => {\n      myForm.append('images', currImg);\n    });\n\n    dispatch(createProduct(myForm));\n  };\n\n  const createProductImagesChange = (e) => {\n    const files = Array.from(e.target.files);\n    setImages([]);\n    setImagesPreview([]);\n\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setImagesPreview((old) => [...old, reader.result]);\n          setImages((old) => [...old, reader.result]);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <MetaData title={'New Product'} />\n          <div className={classes.updateProduct}>\n            <div\n              className={\n                !toggle ? `${classes.firstBox1}` : `${classes.toggleBox1}`\n              }\n            >\n              <Sidebar />\n            </div>\n\n            <div className={classes.secondBox1}>\n              <div className={classes.navBar1}>\n                <Navbar toggleHandler={toggleHandler} />\n              </div>\n\n              <div\n                className={`${classes.formContainer} ${classes.formContainer2}`}\n              >\n                <form\n                  className={`${classes.form} ${classes.form2}`}\n                  encType=\"multipart/form-data\"\n                  onSubmit={createProductSubmitHandler}\n                >\n                  <Avatar className={classes.avatar}>\n                    <AddCircleOutlineIcon />\n                  </Avatar>\n                  <Typography\n                    variant=\"h5\"\n                    component=\"h1\"\n                    className={classes.heading}\n                  >\n                    Create Product\n                  </Typography>\n                  <TextField\n                    variant=\"outlined\"\n                    fullWidth\n                    className={`${classes.nameInput} ${classes.textField}`}\n                    label=\"Product Name\"\n                    required\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <ShoppingCartOutlinedIcon\n                            style={{\n                              fontSize: 20,\n                              color: '#414141',\n                            }}\n                          />\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Price\"\n                    value={price}\n                    required\n                    fullWidth\n                    className={`${classes.passwordInput} ${classes.textField}`}\n                    onChange={(e) => setPrice(e.target.value)}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment\n                          position=\"end\"\n                          style={{\n                            fontSize: 20,\n                            color: '#414141',\n                          }}\n                        >\n                          <AttachMoneyIcon />\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Stock\"\n                    value={Stock}\n                    required\n                    className={`${classes.passwordInput} ${classes.textField}`}\n                    onChange={(e) => setStock(e.target.value)}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment\n                          position=\"end\"\n                          style={{\n                            fontSize: 20,\n                            color: '#414141',\n                          }}\n                        >\n                          <StorageIcon />\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Product info\"\n                    value={info}\n                    required\n                    className={`${classes.passwordInput} ${classes.textField}`}\n                    onChange={(e) => setInfo(e.target.value)}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment\n                          position=\"end\"\n                          style={{\n                            fontSize: 20,\n                            color: '#414141',\n                          }}\n                        >\n                          <InfoIcon />\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n\n                  <div className={classes.selectOption}>\n                    {!isCategory && (\n                      <Typography variant=\"body2\" className={classes.labelText}>\n                        Choose Category\n                      </Typography>\n                    )}\n                    <FormControl className={classes.formControl}>\n                      <Select\n                        variant=\"outlined\"\n                        fullWidth\n                        value={category}\n                        onChange={handleCategoryChange}\n                        className={classes.select}\n                        inputProps={{\n                          name: 'category',\n                          id: 'category-select',\n                        }}\n                        MenuProps={{\n                          classes: {\n                            paper: classes.menu,\n                          },\n                          anchorOrigin: {\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                          },\n                          transformOrigin: {\n                            vertical: 'top',\n                            horizontal: 'left',\n                          },\n                          getContentAnchorEl: null,\n                        }}\n                      >\n                        {!category && (\n                          <MenuItem value=\"\">\n                            <em>Choose Category</em>\n                          </MenuItem>\n                        )}\n                        {categories.map((cate) => (\n                          <MenuItem key={cate} value={cate}>\n                            {cate}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </div>\n                  <TextField\n                    variant=\"outlined\"\n                    fullWidth\n                    className={classes.descriptionInput}\n                    label=\"Product Description\"\n                    multiline\n                    rows={1}\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <DescriptionIcon\n                            className={classes.descriptionIcon}\n                          />\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n\n                  <div className={classes.root}>\n                    <div className={classes.imgIcon}>\n                      <CollectionsIcon\n                        fontSize=\"large\"\n                        style={{ fontSize: 40 }}\n                      />\n                    </div>\n\n                    <input\n                      type=\"file\"\n                      name=\"avatar\"\n                      className={classes.input}\n                      accept=\"image/*\"\n                      onChange={createProductImagesChange}\n                      multiple\n                      style={{ display: 'none' }}\n                      ref={fileInputRef}\n                    />\n                    <label htmlFor=\"avatar-input\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"default\"\n                        className={classes.uploadAvatarButton}\n                        startIcon={\n                          <CloudUploadIcon\n                            style={{\n                              color: '#FFFFFF',\n                            }}\n                          />\n                        }\n                        onClick={handleImageUpload}\n                      >\n                        <p className={classes.uploadAvatarText}>\n                          Upload Images\n                        </p>\n                      </Button>\n                    </label>\n                  </div>\n\n                  <Box className={classes.imageArea}>\n                    {imagesPreview &&\n                      imagesPreview.map((image, index) => (\n                        <img\n                          key={index}\n                          src={image}\n                          alt=\"Product Preview\"\n                          className={classes.image}\n                        />\n                      ))}\n                  </Box>\n\n                  <Button\n                    variant=\"contained\"\n                    className={classes.loginButton}\n                    fullWidth\n                    type=\"submit\"\n                    disabled={loading ? true : false}\n                  >\n                    Create\n                  </Button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\nexport default NewProduct;\n"],"names":["dispatch","useDispatch","history","useHistory","alert","useAlert","loading","error","success","useSelector","state","addNewProduct","name","setName","useState","price","setPrice","description","setDescription","category","setCategory","Stock","setStock","info","setInfo","images","setImages","imagesPreview","setImagesPreview","isCategory","setIsCategory","fileInputRef","useRef","toggle","setToggle","classes","useStyles","useEffect","clearErrors","push","type","NEW_PRODUCT_RESET","_jsx","_Fragment","children","Loader","_jsxs","MetaData","title","className","updateProduct","concat","toggleBox1","firstBox1","Sidebar","secondBox1","navBar1","Navbar","toggleHandler","console","log","formContainer","formContainer2","form","form2","encType","onSubmit","e","preventDefault","myForm","FormData","set","forEach","currImg","append","createProduct","Avatar","avatar","AddCircleOutlineIcon","Typography","variant","component","heading","TextField","fullWidth","nameInput","textField","label","required","value","onChange","target","InputProps","endAdornment","InputAdornment","position","ShoppingCartOutlinedIcon","style","fontSize","color","passwordInput","AttachMoneyIcon","StorageIcon","InfoIcon","selectOption","labelText","FormControl","formControl","Select","select","inputProps","id","MenuProps","paper","menu","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","MenuItem","map","cate","descriptionInput","multiline","rows","DescriptionIcon","descriptionIcon","root","imgIcon","CollectionsIcon","input","accept","files","Array","from","file","reader","FileReader","onload","readyState","old","result","readAsDataURL","multiple","display","ref","htmlFor","Button","uploadAvatarButton","startIcon","CloudUploadIcon","onClick","handleImageUpload","current","click","uploadAvatarText","Box","imageArea","image","index","src","alt","loginButton","disabled"],"sourceRoot":""}