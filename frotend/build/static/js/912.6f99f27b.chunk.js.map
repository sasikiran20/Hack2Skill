{"version":3,"file":"static/js/912.6f99f27b.chunk.js","mappings":"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","sources":["component/Admin/UpdateProduct.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useAlert } from 'react-alert';\nimport MetaData from '../layouts/MataData/MataData';\nimport Loader from '../layouts/loader/Loader';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport StorageIcon from '@material-ui/icons/Storage';\nimport {\n  Avatar,\n  Button,\n  TextField,\n  Typography,\n  FormControl,\n} from '@material-ui/core';\nimport Sidebar from './Siderbar';\nimport {\n  updateProduct,\n  clearErrors,\n  getProductDetails,\n} from '../../actions/productAction';\nimport { useHistory } from 'react-router-dom';\nimport { UPDATE_PRODUCT_RESET } from '../../constants/productsConstatns';\nimport { useRouteMatch } from 'react-router-dom';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Box from '@material-ui/core/Box';\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport CollectionsIcon from '@mui/icons-material/Collections';\nimport Select from '@material-ui/core/Select';\nimport InfoIcon from '@mui/icons-material/Info';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Navbar from './Navbar';\nimport useStyles from '../User/LoginFromStyle';\nfunction UpdateProduct() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const alert = useAlert();\n\n  const classes = useStyles();\n  const productId = useRouteMatch().params.id;\n  const { error, product } = useSelector((state) => state.productDetails);\n\n  const {\n    loading,\n    error: updateError,\n    isUpdated,\n  } = useSelector((state) => state.deleteUpdateProduct);\n\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [isCategory, setIsCategory] = useState(false);\n  const [Stock, setStock] = useState(0);\n  const [images, setImages] = useState([]);\n  const [info, setInfo] = useState('');\n  const [imagesPreview, setImagesPreview] = useState([]);\n  const [oldImages, setOldImages] = useState([]);\n  const fileInputRef = useRef();\n  const [toggle, setToggle] = useState(false);\n  const categories = [\n    'Antique Ceramics',\n    'Vase',\n    'Clocks',\n    'Jewellery',\n    'Vintage Decor',\n  ];\n  const handleCategoryChange = (e) => {\n    setCategory(e.target.value);\n    setIsCategory(true);\n  };\n\n  useEffect(() => {\n    if (product && product._id !== productId) {\n      dispatch(getProductDetails(productId));\n    } else {\n      setName(product.name);\n      setDescription(product.description);\n      setPrice(product.price);\n      setCategory('');\n      setInfo(product.info);\n      setStock(product.Stock);\n      setOldImages(product.images);\n    }\n\n    if (error) {\n      alert.error(error);\n      dispatch(clearErrors());\n    }\n\n    if (updateError) {\n      alert.error(updateError);\n      dispatch(clearErrors());\n    }\n\n    if (isUpdated) {\n      alert.success('Product Updated Successfully');\n      history.push('/admin/products');\n      dispatch({ type: UPDATE_PRODUCT_RESET });\n    }\n  }, [\n    dispatch,\n    alert,\n    error,\n    history,\n    isUpdated,\n    productId,\n    product,\n    updateError,\n  ]);\n\n  const createProductSubmitHandler = (e) => {\n    e.preventDefault();\n    const myForm = new FormData();\n    myForm.set('name', name);\n    myForm.set('price', price);\n    myForm.set('description', description);\n    myForm.set('category', category);\n    myForm.set('Stock', Stock);\n    myForm.set('info', info);\n    images.forEach((currImg) => {\n      myForm.append('images', currImg);\n    });\n\n    dispatch(updateProduct(productId, myForm));\n  };\n\n  const handleImageUpload = () => {\n    fileInputRef.current.click();\n  };\n\n  const updateProductImagesChange = (e) => {\n    const files = Array.from(e.target.files);\n    setImages([]);\n    setImagesPreview([]);\n    setOldImages([]);\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setImagesPreview((prev) => [...prev, reader.result]);\n          setImages((prev) => [...prev, reader.result]);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n  // togle handler =>\n  const toggleHandler = () => {\n    console.log('toggle');\n    setToggle(!toggle);\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <>\n            <MetaData title=\"Create Product\" />\n            <div className={classes.updateProduct}>\n              <div\n                className={\n                  !toggle ? `${classes.firstBox1}` : `${classes.toggleBox1}`\n                }\n              >\n                <Sidebar />\n              </div>\n              <div className={classes.secondBox1}>\n                <div className={classes.navBar1}>\n                  <Navbar toggleHandler={toggleHandler} />\n                </div>\n\n                <div\n                  className={`${classes.formContainer} ${classes.formContainer2}`}\n                >\n                  <form\n                    className={`${classes.form} ${classes.form2}`}\n                    encType=\"multipart/form-data\"\n                  >\n                    <Avatar className={classes.avatar}>\n                      <AddCircleOutlineIcon />\n                    </Avatar>\n                    <Typography\n                      variant=\"h5\"\n                      component=\"h1\"\n                      className={classes.heading}\n                    >\n                      Create Product\n                    </Typography>\n                    {/* SpellcheckIcon */}\n                    <TextField\n                      variant=\"outlined\"\n                      fullWidth\n                      className={`${classes.nameInput} ${classes.textField}`}\n                      label=\"Product Name\"\n                      required\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <ShoppingCartOutlinedIcon\n                              style={{\n                                fontSize: 20,\n                                color: '#414141',\n                              }}\n                            />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                    <TextField\n                      variant=\"outlined\"\n                      label=\"Price\"\n                      value={price}\n                      required\n                      fullWidth\n                      className={`${classes.passwordInput} ${classes.textField}`}\n                      onChange={(e) => setPrice(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment\n                            position=\"end\"\n                            style={{\n                              fontSize: 20,\n                              color: '#414141',\n                            }}\n                          >\n                            <AttachMoneyIcon />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n\n                    <TextField\n                      variant=\"outlined\"\n                      label=\"Stock\"\n                      value={Stock}\n                      required\n                      className={`${classes.passwordInput} ${classes.textField}`}\n                      onChange={(e) => setStock(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment\n                            position=\"end\"\n                            style={{\n                              fontSize: 20,\n                              color: '#414141',\n                            }}\n                          >\n                            <StorageIcon />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                    <TextField\n                      variant=\"outlined\"\n                      label=\"Prodcut Info\"\n                      value={info}\n                      required\n                      className={`${classes.passwordInput} ${classes.textField}`}\n                      onChange={(e) => setInfo(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment\n                            position=\"end\"\n                            style={{\n                              fontSize: 20,\n                              color: '#414141',\n                            }}\n                          >\n                            <InfoIcon />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n\n                    <div className={classes.selectOption}>\n                      {!isCategory && (\n                        <Typography\n                          variant=\"body2\"\n                          className={classes.labelText}\n                        >\n                          Choose Category\n                        </Typography>\n                      )}\n                      <FormControl className={classes.formControl}>\n                        <Select\n                          variant=\"outlined\"\n                          fullWidth\n                          value={category}\n                          onChange={handleCategoryChange}\n                          className={classes.select}\n                          inputProps={{\n                            name: 'category',\n                            id: 'category-select',\n                          }}\n                          MenuProps={{\n                            classes: {\n                              paper: classes.menu,\n                            },\n                            anchorOrigin: {\n                              vertical: 'bottom',\n                              horizontal: 'left',\n                            },\n                            transformOrigin: {\n                              vertical: 'top',\n                              horizontal: 'left',\n                            },\n                            getContentAnchorEl: null,\n                          }}\n                        >\n                          {!category && (\n                            <MenuItem value=\"\">\n                              <em>Choose Category</em>\n                            </MenuItem>\n                          )}\n                          {categories.map((cate) => (\n                            <MenuItem key={cate} value={cate}>\n                              {cate}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </div>\n\n                    <TextField\n                      variant=\"outlined\"\n                      fullWidth\n                      className={classes.descriptionInput}\n                      label=\"Product Description\"\n                      multiline\n                      rows={1}\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <DescriptionIcon\n                              className={classes.descriptionIcon}\n                            />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n\n                    <div className={classes.root}>\n                      <div className={classes.imgIcon}>\n                        <CollectionsIcon\n                          fontSize=\"large\"\n                          style={{ fontSize: 40 }}\n                        />\n                      </div>\n\n                      <input\n                        type=\"file\"\n                        name=\"avatar\"\n                        className={classes.input}\n                        accept=\"image/*\"\n                        onChange={updateProductImagesChange}\n                        multiple\n                        style={{ display: 'none' }}\n                        ref={fileInputRef}\n                      />\n                      <label htmlFor=\"avatar-input\">\n                        <Button\n                          variant=\"contained\"\n                          color=\"default\"\n                          className={classes.uploadAvatarButton}\n                          startIcon={\n                            <CloudUploadIcon\n                              style={{\n                                color: '#FFFFFF',\n                              }}\n                            />\n                          }\n                          onClick={handleImageUpload}\n                        >\n                          <p className={classes.uploadAvatarText}>\n                            Upload Images\n                          </p>\n                        </Button>\n                      </label>\n                    </div>\n\n                    {imagesPreview.length > 0 ? (\n                      <Box className={classes.imageArea}>\n                        {imagesPreview &&\n                          imagesPreview.map((image, index) => (\n                            <img\n                              key={index}\n                              src={image}\n                              alt=\"Product Preview\"\n                              className={classes.image}\n                            />\n                          ))}\n                      </Box>\n                    ) : (\n                      <Box className={classes.imageArea}>\n                        {oldImages &&\n                          oldImages.map((image, index) => (\n                            <img\n                              key={index}\n                              src={image.url}\n                              alt=\"Old Product Preview\"\n                              className={classes.image}\n                            />\n                          ))}\n                      </Box>\n                    )}\n\n                    <Button\n                      variant=\"contained\"\n                      className={classes.loginButton}\n                      fullWidth\n                      onClick={createProductSubmitHandler}\n                      disabled={loading ? true : false}\n                    >\n                      Create\n                    </Button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </>\n        </>\n      )}\n    </>\n  );\n}\nexport default UpdateProduct;\n"],"names":["dispatch","useDispatch","history","useHistory","alert","useAlert","classes","useStyles","productId","useRouteMatch","params","id","error","product","useSelector","state","productDetails","loading","updateError","isUpdated","deleteUpdateProduct","name","setName","useState","price","setPrice","description","setDescription","category","setCategory","isCategory","setIsCategory","Stock","setStock","images","setImages","info","setInfo","imagesPreview","setImagesPreview","oldImages","setOldImages","fileInputRef","useRef","toggle","setToggle","useEffect","_id","getProductDetails","clearErrors","success","push","type","UPDATE_PRODUCT_RESET","_jsx","_Fragment","children","Loader","_jsxs","MetaData","title","className","updateProduct","concat","toggleBox1","firstBox1","Sidebar","secondBox1","navBar1","Navbar","toggleHandler","console","log","formContainer","formContainer2","form","form2","encType","Avatar","avatar","AddCircleOutlineIcon","Typography","variant","component","heading","TextField","fullWidth","nameInput","textField","label","required","value","onChange","e","target","InputProps","endAdornment","InputAdornment","position","ShoppingCartOutlinedIcon","style","fontSize","color","passwordInput","AttachMoneyIcon","StorageIcon","InfoIcon","selectOption","labelText","FormControl","formControl","Select","select","inputProps","MenuProps","paper","menu","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","MenuItem","map","cate","descriptionInput","multiline","rows","DescriptionIcon","descriptionIcon","root","imgIcon","CollectionsIcon","input","accept","files","Array","from","forEach","file","reader","FileReader","onload","readyState","prev","result","readAsDataURL","multiple","display","ref","htmlFor","Button","uploadAvatarButton","startIcon","CloudUploadIcon","onClick","handleImageUpload","current","click","uploadAvatarText","length","Box","imageArea","image","index","src","alt","url","loginButton","preventDefault","myForm","FormData","set","currImg","append","disabled"],"sourceRoot":""}